stages:
  - build
  - genModels
  - extractModels

variables:
  GIT_SUBMODULE_STRATEGY: recursive

.install_pixi:
  before_script:
    # fetch and install pixi locally
    - curl -fsSL https://pixi.sh/install.sh | bash
    - . ~/.bash_profile

build_local:
  extends: .install_pixi
  stage: build
  image: gitlab-registry.cern.ch/linuxsupport/alma9-base
  script:
    # run small pixi tests
    - pixi list
    - pixi run python --version
    - pixi run which gcc
    - pixi run which cc
    - pixi run which c++
    # build project
    - pixi run build
  artifacts:
    expire_in: 1 week
    paths:
      - build/

build_docker:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.14.0-debug
    entrypoint: [""]
  script:
    # Prepare Kaniko configuration file
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    # Build and push the image
    - |
      # If pipeline runs on the default branch (main): Set tag to "latest"
      if test "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH"; then
        add=""
        tag="latest"
      # If pipeline is a tag pipeline, set tag to the git commit tag
      elif test -n "${CI_COMMIT_TAG}"; then
        add=""
        tag="${CI_COMMIT_TAG}"
      # Else set the tag to the branch name and git commit sha
      else
        add="${CI_COMMIT_REF_SLUG}"
        tag="-${CI_COMMIT_SHORT_SHA}"
      fi
      IMAGE_DESTINATION=${CI_REGISTRY_IMAGE}:${add}${tag}
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --destination "${IMAGE_DESTINATION}"
    - echo "Image pushed successfully to ${IMAGE_DESTINATION}"
    - echo "IMAGE_DESTINATION=$IMAGE_DESTINATION" >> deploy.env
  artifacts:
    reports:
      dotenv: deploy.env
    expire_in: 1 day

genModels_local:
  extends: .install_pixi
  stage: genModels
  dependencies:
    - build_local
  script:
    - pixi list
    - ls
    - pwd
    - pixi run genModels
  artifacts:
    paths:
      - run/scan
    expire_in: 1 day

genModels_docker:
  stage: genModels
  dependencies:
    - build_docker
  image: ${IMAGE_DESTINATION}
  script:
    # source bashrc so pixi and Run3ModelGen are setup
    - . ~/.bashrc
    # run test
    - pixi list
    - ls
    - pwd
    - mkdir run && cd run
    - pixi run genModels.py
  artifacts:
    paths:
      - run/scan
    expire_in: 1 day

extractModels_local:
  extends: .install_pixi
  stage: extractModels
  dependencies:
    - build_local
    - genModels_local
  script:
    - pixi list
    - ls
    - pwd
    - . build/setup.sh
    - cd run
    - pixi run extractModels.py --scan_dir scan --root_file scan/ntuple.0.0.root --selection "(akarr['SS_m_h']!=-1) & (akarr['SS_m_h'] <= 130)"

extractModels_docker:
  stage: extractModels
  dependencies:
    - build_docker
    - genModels_docker
  image: ${IMAGE_DESTINATION}
  script:
    # source bashrc so pixi and Run3ModelGen are setup
    - . ~/.bashrc
    # run test
    - pixi list
    - ls
    - pwd
    - cd run
    - pixi run extractModels.py --scan_dir scan --root_file scan/ntuple.0.0.root --selection "(akarr['SS_m_h']!=-1) & (akarr['SS_m_h'] <= 130)"